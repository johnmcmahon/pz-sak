def THREADFIX_ID = env.THREADFIX_ID ? env.THREADFIX_ID : '115'

node {
  def nodejs = tool 'NodeJS_6'
  def mvn = tool 'M3'
  def root = pwd()

  stage('Setup') {
    deleteDir()
    if(env.GITLAB_CREDS) {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
    } else {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
    }
  }

  def appvers = sh(script: "git describe --long --tags --always | sed 's/\\./-/'g", returnStdout: true)
  def appName = "pz-sak-${appvers}"

  /*
  stage('Setup') {
    deleteDir()
    git url: "git@gitlab.gs.mil:venice/pz-jobcommon", branch: "master", credentialsId: "aaef610c-9fd0-4812-9027-755ff3a872a5"
  }*/

  stage('Karma Tests') {
    withEnv(["PATH+=${nodejs}/bin", "NPM_CONFIG_CACHE=${root}/.npmcache", "HOME=${WORKSPACE}"]) {
	  withCredentials([[$class: 'StringBinding', credentialsId: 'baxtersh_npm_credentials', variable: 'NPM_AUTH']]) {
	    sh "mkdir -p ${root}/.npmcache"
		sh "npm set always-auth true"
	    sh "npm set _auth ${NPM_AUTH}"
	    sh "npm install"
		sh "./node_modules/karma/bin/karma --version"
        sh "./node_modules/karma/bin/karma start"
	  }
    }
  }

  stage('Archive') {
    def archiveName = "pz-sak.tar.gz"
    sh "tar -czf ${archiveName} -C ${root} public"
    sh """mvn -X --settings ~/.m2/settings.xml deploy:deploy-file -Dfile=${archiveName} \
		-DrepositoryId=nexus \
		-Durl="${env.ARTIFACT_STORAGE_DEPLOY_URL}" \
		-DgroupId="org.piazza" \
		-DgeneratePom=false \
		-Dpackaging=tar.gz \
		-Dmaven.repo.local="${root}/.m2/repository" \
		-DartifactId=pz-sak \
		 -Dversion=${appvers} \
	"""
  }

  stage('Initial Scans') {
    withCredentials([[$class: 'StringBinding', credentialsId: '${env.THREADFIX_API_KEY}', variable: 'THREADFIX_KEY']]) {
      sh "/jslave/dependency-check/dependency-check/bin/dependency-check.sh --version"
      sh '/jslave/dependency-check/dependency-check/bin/dependency-check.sh --project "pz-sak" --scan "." --format "XML" --enableExperimental --disableBundleAudit'
      sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml https://threadfix.gs.mil/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
	}
  }

  stage ('Int Deploy') {
    if(!fileExists('.cf')) {
      sh "mkdir -p .cf"
    }
    withEnv(['CF_HOME=.cf']) {
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'ldap_baxtersh', usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
        sh "cf api ${env.PCF_API_ENDPOINT}"
        sh "cf auth ${CFUSER} ${CFPASS}"
        sh "cf target -o Optimus -s ${env.PHASE_ONE_PCF_SPACE}"
        sh "cf push ${appName} --hostname ${appName} -f manifest.jenkins.yml -d ${env.PHASE_ONE_PCF_DOMAIN} --no-start"
		sh "cf set-env SPACE ${env.PHASE_ONE_PCF_SPACE}"
		sh "cf set-env DOMAIN ${env.PHASE_ONE_PCF_DOMAIN}"
		sh "cf start"
	  }
	}
	withCredentials([[$class: 'StringBinding', credentialsId: '${env.THREADFIX_API_KEY}', variable: 'THREADFIX_KEY']]) {
	  sh """${env.ZAPROXY_HOME}/zap.sh -cmd \
	    -quickout ${root}/out/zap.xml \
	    -quickurl https://${appName}.${env.PHASE_ONE_PCF_DOMAIN} \
	  """
	  cat ${root}/out/zap.xml
	  // Do we have to explicitly upload this to Threadfix or something?
	}
    withEnv(['CF_HOME=.cf']) {
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'ldap_baxtersh', usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
        sh "cf api ${env.PCF_API_ENDPOINT}"
        sh "cf auth ${CFUSER} ${CFPASS}"
        sh "cf target -o Optimus -s ${env.PHASE_ONE_PCF_SPACE}"
		def legacyAppName = sh(script: "cf routes | grep \"pz-sak \" | awk '{print \$4}'", returnStdout: true)
		sh "cf map-route ${appName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname pz-sak"
		def appExists = sh(script: "cf target ${legacyAppName}", returnStatus: true) == 0
		if (appExists) {
		  // Delete old app. Do we have to unmap the routes?
	      sh "cf delete ${legacyAppName} -f"
		}
	  }
	}
  }

  if (DEPLOY_PHASE_TWO) {
	  stage('Stage Deploy') {
		if(!fileExists('.cf')) {
		  sh "mkdir -p .cf"
		}
		withEnv(['CF_HOME=.cf']) {
		  withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'ldap_baxtersh', usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
			sh "cf api ${env.PCF_API_ENDPOINT}"
			sh "cf auth ${CFUSER} ${CFPASS}"
			sh "cf target -o Optimus -s ${env.PHASE_TWO_PCF_SPACE}"
			sh "cf push ${appName} --hostname ${appName} -f manifest.jenkins.yml -d ${env.PHASE_TWO_PCF_DOMAIN} --no-start"
			sh "cf set-env SPACE ${env.PHASE_TWO_PCF_SPACE}"
			sh "cf set-env DOMAIN ${env.PHASE_TWO_PCF_DOMAIN}"
			sh "cf start"
		  }
		}
		withCredentials([[$class: 'StringBinding', credentialsId: '${env.THREADFIX_API_KEY}', variable: 'THREADFIX_KEY']]) {
		  sh """${env.ZAPROXY_HOME}/zap.sh -cmd \
			-quickout ${root}/out/zap.xml \
			-quickurl https://${appName}.${env.PHASE_TWO_PCF_DOMAIN} \
		  """
		  cat ${root}/out/zap.xml
		  // Do we have to explicitly upload this to Threadfix or something?
		}
		withEnv(['CF_HOME=.cf']) {
		  withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'ldap_baxtersh', usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
			sh "cf api ${env.PCF_API_ENDPOINT}"
			sh "cf auth ${CFUSER} ${CFPASS}"
			sh "cf target -o Optimus -s ${env.PHASE_TWO_PCF_SPACE}"
			def legacyAppName = sh(script: "cf routes | grep \"pz-sak \" | awk '{print \$4}'", returnStdout: true)
			sh "cf map-route ${appName} ${env.PHASE_TWO_PCF_DOMAIN} --hostname pz-sak"
			def appExists = sh(script: "cf target ${legacyAppName}", returnStatus: true) == 0
			if (appExists) {
			  // Delete old app. Do we have to unmap the routes?
			  sh "cf delete ${legacyAppName} -f"
			}
		  }
		}
	  }
  }

  stage('Final Scans') {
	withCredentials([[$class: 'StringBinding', credentialsId: '${env.THREADFIX_API_KEY}', variable: 'THREADFIX_KEY']]) {
      sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER} '**/*.js' -exclude 'test/*.js' -exclude package.json -exclude 'node_modules/**/*.js' -exclude 'public/js/**/*.js'"
      sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER}  -scan -Xmx1G -f fortifyResults-${env.BUILD_NUMBER}.fpr"
      sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@fortifyResults-${env.BUILD_NUMBER}.fpr https://threadfix.gs.mil/rest/applications/${THREADFIX_ID}/upload?apiKey=$THREADFIX_KEY"
	}
  }

  stage ('Cleanup') {
    deleteDir()
  }
}
