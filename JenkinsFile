@Library('pipelib@master') _

def THREADFIX_ID = env.THREADFIX_ID ? env.THREADFIX_ID : '115'

node {
// ('sl61')
  def nodejs = tool 'NodeJS_6'

  stage('Setup') {
    git([
      url: env.GIT_URL ? env.GIT_URL : 'https://github.com/venicegeo/pz-sak',
      branch: "master"
    ])
  }

  stage('Karma Tests') {
    npmSetup()
    withEnv(["PATH+=${nodejs}/bin"]) {
      sh './ci/karma.sh'
    }
  }

  stage('Archive') {
    sh './ci/archive.sh'
    mavenPush()
  }

  stage('Initial Scans') {
    dependencyCheck {
      threadfixId = THREADFIX_ID
    }

    // We shouldn't need to run sonar again because the lcov.info file was
    // already generated with karma tests and the sonar-project.properties file exists
    // sh './ci/sonar.sh'
  }

  stage ('CI Deploy') {
    cfPush()
    zap {
      threadfixId = THREADFIX_ID
    }
    cfBgDeploy()
  }

  stage ('Int: Integration Testing') {
    postman()
  }

  stage('Reset') {
    git([
      url: env.GIT_URL ? env.GIT_URL : 'https://github.com/venicegeo/pz-sak',
      branch: "master"
    ])
  }

  stage('Staging Deploy') {
    cfPush {
      cfSpace = 'stage'
    }
    cfBgDeploy {
      cfSpace = 'stage'
    }
  }

  stage ('Stage: Integration Testing') {
    postman {
      cfSpace = 'stage'
    }
  }

  stage('Reset') {
    git([
      url: env.GIT_URL ? env.GIT_URL : 'https://github.com/venicegeo/pz-sak',
      branch: "master"
    ])
  }

  stage('Final Scans') {
    fortify {
      threadfixId = THREADFIX_ID
    }
  }

  stage ('Cleanup') {
    deleteDir()
  }
}
